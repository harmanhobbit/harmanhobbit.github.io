[ { "title": "Home Assistant Alexa smart home integration over Cloudflare", "url": "/posts/home-assistant-alexa-cloudflare/", "categories": "Home Assistant, Cloudflare", "tags": "hass, homeassistant, cloudflare, firewall", "date": "2022-07-01 00:00:00 +0100", "snippet": "Today I decided it was the day that I was going to manage to get Alexa to talk to my Home Assistant (HA). There are a couple of things that made this slightly difficult for me. The first was that I had limited access to my domain only to the UK. The second was a setting I didn’t even know was on but after finding it I didn’t want to turn it off. Something that made it a little hard to track down was that the error message was being masked by an error that is commonly encountered during the setup process.TL;DRIf you are running your Home Assitant instance through Cloudflare and your Alexa cannot connect or successfully get an authentication token then check your Bot Fight setting and Web Application Firewall rules.The Back StoryWhen I first started self-hosting I was getting some random hits on my domains. For some reason, someone in Singapore seemed to think I was running a WordPress site on my domain and kept trying to hit the admin page. So just to be safe I decided to set up a WAF (although it was just called firewall rules back then) rule to only allow traffic in from the United Kingdom. This seemed like a sensible decision as I live in the UK and could always add a new rule if I was going to spend any amount of time in a foreign country.Solving the first problem - Wrong countryFrom the photo above you can see that I was getting an INVALID_AUTHORIZATION_CREDENTIAL error. What I didn’t realize for a very long time is that the body of my error was different from the one that was in the video tutorial I was following. After realizing that I had a different error I straight away started to google it. What took me the longest was tracking down what was causing the 1020 error. Eventually, I realized that it was coming from Cloudflare and not from my Home Assistant server. Once I knew which logs I should be looking at it was much easier to track down the exact problem to fix it. It turns out that it was because of the decision I had taken a year ago that I explained above. To test my theory I added the county that I was using to run my AWS Lambda function into another rule and, hey presto, I was able to get a response back from my HA server.Solving the second problem - BotsThe next problem was not quite so easy to track down. Once I had the Lambda function working I moved on to trying to get the authentication going. Knowing that it was probably my WAF that was going to be causing the problem gave me a head start on tracking the problem down. Watching the logs as I tried to sign in showed that several requests were being issued a JavaScript bot challenge. And as it was a bot trying to sign in it was of course failing to do so. A slightly secondary issue was that the bot seemed to be coming from the USA and not Ireland or the United Kingdom as I had been expecting.To start with I thought that adding another WAF rule to allow both the USA and Known Bots might be the solution. This didn’t work as expected.I’m not sure why but Cloudflare’s bot fight security setting seems to be the ultimate rule. There is no way to override it. The second problem is there are a lot of people and/or servers in the US that I didn’t particularly want to access my home automation. This meant I wanted to narrow down the scope of a WAF rule that might let traffic in. I finally settled on a rule that ensured that the country was the USA, the hostname being requested matched that of my public-facing HA subdomain and finally the URI path matched that it needed to get the correct authorization token. The final rule looked something like this:(ip.geoip.country eq \"US\"andhttp.host eq \"&lt;subdomain&gt;.&lt;domain&gt;.&lt;tld&gt;\"andhttp.request.uri.path eq \"/auth/token\") N.B. This should be one continuous line but I have broken it up in an attempt to make it easier to read.This, after all of my previous WAF fun, surprisingly worked.Combining the WAF rulesUnfortunately, I was now using 4 out of my 5 free WAF rules on my Cloudflare account so the next problem became combining the rules all into one. There seems to be a slight bug in the Cloudflare WAF rules that the following very simple block rule:(ip.geoip.country ne \"GB\") or (ip.geoip.country ne \"IE\") N.B. This should be one continuous line but I have broken it up in an attempt to make it easier to read.Just blocks everything as GB is not IE and IE is not GB. Not the most useful. Luckily if you start building more complex rules this flaw doesn’t seem to hold up. That means we can use something like the following:(ip.geoip.country eq \"IE\"andhttp.host eq \"&lt;subdomain&gt;.&lt;domain&gt;.&lt;tld&gt;\"andhttp.request.uri.path eq \"/api/alexa/smart_home\")or(ip.geoip.country eq \"US\"andhttp.host eq \"&lt;subdomain&gt;.&lt;domain&gt;.&lt;tld&gt;\"andhttp.request.uri.path eq \"/auth/token\")or(ip.geoip.country eq \"GB\") N.B. This should be one continuous line but I have broken it up in an attempt to make it easier to read.Summing upSo now I have one firewall rule that is controlling the access to my domain and whilst I would have liked to keep the Bot Fight setting turned on I think I have reduced the chance of getting unwanted hits. I hope that this may help someone else in the future as it took me a fair chunk of the day to finally work out why the tutorial was failing." }, { "title": "Restarting the blog", "url": "/posts/coming-back/", "categories": "About, blogging", "tags": "restarting, blog", "date": "2022-06-13 00:00:00 +0100", "snippet": "Unfortunately, I have not been blogging over the last 6 months or so. This is because I have returned to my full-time job on the West End and due to many Covid complications I have not had the time or the will to be blogging. Now that we have now bedded into our second cast and things are running much more smoothly, I have a bit more time on my hands. I am currently working on a post about my first attempt at CI/CD, but if there is a topic you think I should write about (preferably relating to theatre sound or lighting) then pop in a comment and I will see about writing some content on it.Hopefully, my next post will be out in a week or so, and then a couple of times a month from there onwards." }, { "title": "Controlling Blackmagic Design Smart Videohubs from QLab", "url": "/posts/blackmagic/", "categories": "qlab, blackmagic", "tags": "qlab, blackmagic, python, applescript", "date": "2021-10-15 00:00:00 +0100", "snippet": "Controlling Blackmagic Design Smart Videohubs from QLab is always a little bit difficult. There are network cues built into QLab but the required TCP cue does not exist. However, it is fairly simple to create a python script to give us this functionality and call that from within anBack in the summer of 2021, I was working on a small show that used eight cameras recording into eight Blackmagic Design HyperDecks. As part of this system, there was a Smart VideoHub. A way to control all of this equipment was missed off the list. So I ended up writing a set of scripts to allow control Blackmagic Design video equipment from QLab. I have planned to clean up the scripts and make them available to the public. But this project is currently sat on the back burner. I have released this script as there is a user on one of the groups who has a similar problem to myself and I feel that this might help them.This script is intended to allow for the control of a single unit over TCP/IP. And was created to allow control from the show control software QLab. However, it can also be run manually, where it should be cross-platform compatible.This script is written in python V2, as this is the default version that ships with macOS. If you have a different version of python running on your mac or PC I believe it will still work, however, I haven’t had the chance to test it.Input and output numbers are normalized by the script to allow for human numbering to be used.Usage for controlling VideoHub from QLabDownloading the script from GitHub and save it as smarthubctl.pyAll methods of use require the placeholder to be changed for the IP address of the Smart Videohub unit. For example, the lineshould read something like address = \"192.168.1.100\".Using the script from the command line called in the following way: python smarthubctl.py *input* *output*To run the script from QLab. Call the python script from an AppleScript cue like so: 'do shell script \"python /path/to/script/smarthubctl.py *input* *output*\"'This script was intended to be a simple way of controlling Blackmagic Design Smart Videohubs from QLab. Hopefully, you will find it useful." }, { "title": "Armv6 node-exporter on Raspberry Pi 1B+", "url": "/posts/armv6-node/", "categories": "Raspberry Pi, node-exporter", "tags": "raspberrypi, pi1b+, node-exporter", "date": "2021-09-16 00:00:00 +0100", "snippet": "After sending a good few hours trying to get Prometheus node-exporter to work on a Raspberry Pi 1B+ I found that it didn’t actually support armv6. I spent some time hunting around and found this image by ndanyluk. However, documentation on it is very scarce so I thought I’d jot down how I managed to get it to work in the hope it might help someone else.Using the prom/node-exporter on armv7 onwards (Raspberry Pi 2 upwards)The command I had been using to run node-exporter normally looks something a bit like this:sudo docker run --net=\"host\" --pid=\"host\" -v \"/:/host:ro,rslave\" \\ --name=\"node-exporter\" prom/node-exporter:latest --path.rootfs=/host.Let’s break it down the node-exporter commandThe usual sudo docker run calls the docker command with superuser privileges and tells it we want to run a new container.--net=\"host\" --pid=\"host\" instructs the new container to use the host’s already existing network stack. This improves the performance as NAT (Network Address Translation) is not required. However, this does mean we need to manage our ports carefully as this can lead to conflicts. I don’t have a service already running on the required port (9100) so I don’t have to worry about this. And the also allows the container to access the process tree on the host. Which in this case allows the container to scrape data from the host.This next argument is a little complicated. -v \"/:/host:ro,rslave\". It starts off well, -v \"/:/host adds the root of the host to the container as a volume mounted in the /host directory. Now we get the bit that we usually leave off. :ro, mounts the drive as a read-only partition (probably a good thing for a monitoring tool). And the final part dictates that the mount can only be used in one direction.The rest of the command is pretty straightforward with the --name argument setting the name of the container. And the final part is the image we want to use. In this case, it’s the ndanyluk version of node-exporter. The very final argument tells the container that it should create the binary from the host’s root file system.How is armv6 different to other arm command?So now how do we get node-exporter running on the armv6 platform of a Raspberry Pi 1B+? As there is no documentation for the ndanyluk’s version of the node exporter it took me a little while to work out how to get it going. I eventually stumbled across the answer in his GitHub repository for the project. One of the files in the repo is a test script that automatically spins up a container from the image that is built to allow for testing. And in this script, there is a subtle difference in the command being called. Here it is below, see if you can spot the difference.sudo docker run --net=\"host\" --pid=\"host\" \\ -v \"/:/host:ro,rslave\" \\ -v \"/etc/hostname:/etc/nodename\" \\ --name=\"node-exporter\" ndanyluk/ \\ node-exporter-armv6:latest --path.rootfs=/hostYou got it. The subtle difference is that we have to mount the hostname file into the container as the nodename file. Now when we run the container it loads up without any errors and provides the data we need to export to a system like Prometheus so we can make some super sexy dashboards of all of those stats we all love.So this is how I got node-exporter running on the armv6 platform. I hope that someone finds this useful and that it saves them a little time.Prometheus logo by Alexander Schwartz (ahus1)[1][2] – https://github.com/prometheus/docs/raw/ca2961b495c3e2a1e4586899c26de692fa5a28e7/static/prometheus_logo_orange_circle.svg,Apache License 2.0, https://commons.wikimedia.org/w/index.php?curid=85744651" }, { "title": "Getting more analytics for a free Cloudflare account", "url": "/posts/free-cloudflare-analytics/", "categories": "Cloudflare, Analytics", "tags": "cloudflare, analytics, free", "date": "2021-08-13 00:00:00 +0100", "snippet": "Ever wished that you could get more Cloudflare analytics for free? But don’t want to upgrade your Cloudflare account? So here’s a hacky way to get a little more data out of the free features that you can access.The preambleAs you can see here I have my Cloudflare domain overview dashboard. Now I understand why there are limits to what the free account can access. Storing and crunching through a lot of data can be expensive. And yes there is an analytics page but for my site, it’s extremely sparse in both data and views.Now. There is an obvious solution. We could pay for the Pro plan (which at $20 might just be a bargain). Or we could upgrade a WordPress plugin (once again this involves money). But as you can see from my overview, I don’t get a lot of traffic. This now makes me think it might not be worth it.The gathering of facts from CloudflareOn a side note, I noticed that my “routeMeHome” domain had had a few firewall events pop up. So being slightly bored and curious as to why these event logs were I opened one up. And this is what I found:The interesting parts of this log to me were mainly the Host and Path fields. The firewall allows me to view much more details on the request that had been blocked than the analytics page allows. So an idea pops into my head. The firewall has both a deny and an allow mode. So what happens if I allow everyone access? And the second. How do I allow everyone?The first idea was could I just allow IP addresses ..., however, Cloudflare were ahead of me here, and could tell it was not a valid IP address. Next though. What happens if I allow 255.255.255.255, the network broadcast address, or 0.0.0.0, the magic placeholder that sometimes works. But no neither of these worked either.The Eureka momentI went back to the original firewall event log and checked why it was there. It turns out that earlier that day I decided that as I have no plans to leave the country any time soon, damn you Covid-19, I had blocked all requests that originate from outside the UK. From this, I decided to create a firewall rule to allow all countries other than one. And then include that one back in again as a second part to the rule. The only problem is which country do I pick? I finally settled on Antarctica a) because I’m lazy and this meant I didn’t have to scroll too far. And b) I doubt there are many people in Antarctica trying to read my blog so if this rule breaks the access then it’s probably not the end of the world.(If you are in Antarctica and are having problems accessing my blog let me know and I’ll pick a different country).The testing our analyticsNow that I have a rule in place that seems to be doing what I want, let us see what sort of data it is giving me.And low and behold I have access to that valuable Host and Path information for every request that hits my domain. This is now starting to look like the Cloudflare analytics for free that I promised back at the top of the page. (And yes this one was added because the Yoast algorithm told me I need to use my key phrase one more time).The summing upNow, I’m not saying this is a good idea. Or that even it replaces the Cloudflare analytics section. And in the few hours that I have had this running, I have generated around 18750 firewall event logs. Most of these are from me just editing this post with the way WordPress has been calling page content. At this moment I almost have the complete opposite problem with now having far too much data to process. This is just a way I found to get some extra Cloudflare analytics for free. But I think what and how I can use this data may fall under a different post. For now, I can pull the firewall logs and comb through them trying to work out what on my blog works and what doesn’t.The Cloudflare firewall orderIt appears that the firewall operates in a single match top-down fashion. This means that as soon as it finds a rule that matches it stops checking for any others. This means that the allow all rule needs to be at the bottom. By doing this any other rules you have to block access will match first and then as a last resort the firewall will log the request.The disclaimerI am unsure whether this is a good or a bad idea. Or even if it is something we should be allowed to do. However, it does currently work but if for some reason Cloudflare does change their system to block this I will add an update to the top of this post declaring it broken." } ]
